#!/bin/bash

# üìå –®–ê–ü–ö–ê –°–ö–†–ò–ü–¢–ê
# ==================
# –¢—Ä–µ–±—É–µ–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã: bash curl stress-ng kubectl bc
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
#   URL_1        ‚Äî –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://10.213.22.39:81/)
#   URL_2        ‚Äî –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://10.213.22.40/)
#   TARGET_POD   ‚Äî –∏–º—è –ø–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
#   COMPONENT    ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø–æ–¥–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)
#   NAMESPACE    ‚Äî namespace, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥
#   K8S_INTERVAL ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É kubectl exec –∫–æ–º–∞–Ω–¥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30 —Å–µ–∫—É–Ω–¥)
#   SKIP_K8S     ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ kubectl exec –∫–æ–º–∞–Ω–¥
# –û–ø—Ü–∏–∏:
#   --time       ‚Äî –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m, 5h, 60)
#   --rps        ‚Äî —Ü–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
#   --log        ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /var/log/curl_monitor_*.log)
#   --quiet      ‚Äî —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª)
# –ü—Ä–∏–º–µ—Ä:
#   export URL_1="http://my-service-a/api/" URL_2="http://my-service-b/api/"
#   export TARGET_POD="nginx-pod" COMPONENT="nginx" NAMESPACE="default"
#   ./check.sh --time 1m --rps 100 --quiet
# ==================

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç ===
for cmd in curl stress-ng kubectl bc; do
    command -v $cmd >/dev/null 2>&1 || {
        echo "–û—à–∏–±–∫–∞: '$cmd' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
        exit 1
    }
done

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PID ===
curl_pid=0
stress_pid=0
k8s_pid=0

# === –§–ª–∞–≥ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ cleanup() ===
CLEANUP_RUNNING=0

# === –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è ===
START_TIME=$(date +%s)
START_DATETIME=$(date '+%Y-%m-%d %H:%M:%S')
echo "[START] $START_DATETIME"

# === –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ===
usage() {
    if ! $QUIET; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        echo "  --time <TIME>        –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m, 5h)"
        echo "  --rps <N>            –¶–µ–ª–µ–≤–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É"
        echo "  --log <PATH>         –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞"
        echo "  --no-k8s             –û—Ç–∫–ª—é—á–∏—Ç—å kubectl exec –∫–æ–º–∞–Ω–¥—ã"
        echo "  --quiet, -q          –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º"
        echo ""
    fi
    exit 1
}

# === –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ===
SKIP_K8S=false
QUIET=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help) usage ;;
        --time) MONITOR_TIME="$2"; shift ;;
        --rps) RPS="$2"; shift ;;
        --log) LOGFILE="$2"; shift ;;
        --no-k8s) SKIP_K8S=true ;;
        --quiet | -q) QUIET=true ;;
        *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; usage ;;
    esac
    shift
done

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ env ===
MONITOR_TIME="${MONITOR_TIME:-1m}"
RPS="${RPS:-50}" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 RPS
K8S_INTERVAL="${K8S_INTERVAL:-30}"

# === –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ URL –¥–ª—è curl ===
URL_1="${URL_1:-http://10.213.22.39:81/}"
URL_2="${URL_2:-http://10.213.22.40/}"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ ===
TIMESTAMP=$(date "+%Y%m%d_%H%M%S")
DEFAULT_LOGFILE="/var/log/curl_monitor_${TIMESTAMP}.log"
LOGFILE="${LOGFILE:-$DEFAULT_LOGFILE}"

# === –ü–µ—Ä–µ–≤–æ–¥–∏–º MONITOR_TIME –≤ —Å–µ–∫—É–Ω–¥—ã ===
to_seconds() {
    local time_str="$1"
    if [[ "$time_str" =~ ^([0-9]+)h$ ]]; then
        echo "$((BASH_REMATCH[1] * 3600))"
    elif [[ "$time_str" =~ ^([0-9]+)m$ ]]; then
        echo "$((BASH_REMATCH[1] * 60))"
    elif [[ "$time_str" =~ ^[0-9]+$ ]]; then
        echo "$time_str"
    else
        echo "0"
    fi
}

MONITOR_DURATION_SEC=$(to_seconds "$MONITOR_TIME")
END_TIME_UNIX=$(( $(date +%s) + MONITOR_DURATION_SEC ))

# === –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º parallel –∏ interval –∏–∑ RPS ===
MAX_PARALLEL=$(( RPS / 10 ))
MAX_PARALLEL=${MAX_PARALLEL:-1}
INTERVAL="0.1"

# === –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
total_1=0
success_1=0
fail_1=0

total_2=0
success_2=0
fail_2=0

read_success=0
read_fail=0
write_success=0
write_fail=0
unauth_ping_success=0
unauth_ping_fail=0

# === –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log() {
    if ! $QUIET; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    fi
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOGFILE"
}

# === –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ curl-–∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
do_request() {
    local url="$1"
    local host="$2"

    output=$(curl -s -I --max-time 5 "$url" 2>&1)

    echo "$output" >> "$LOGFILE"

    if [[ -z "$output" ]]; then
        http_code="TIMEOUT"
    else
        status_line=$(echo "$output" | grep -v '^$' | head -n1)
        if [[ "$status_line" =~ HTTP\/[0-9.]+\ +([0-9]{3}) ]]; then
            http_code="${BASH_REMATCH[1]}"
        else
            http_code="NO_RESPONSE"
        fi
    fi

    echo "[RESULT] host=$host code=$http_code" >> "$LOGFILE"
}

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ ===
monitor() {
    local END_TIME="$1"
    while [ $(date +%s) -lt $END_TIME ]; do
        for i in $(seq 1 $MAX_PARALLEL); do
            do_request "$URL_1" "1" &
            do_request "$URL_2" "2" &
        done

        wait
        sleep "$INTERVAL"
    done
}

# === –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø–æ–¥–µ ===
run_kubectl_commands() {
    local COUNT=0

    while [ $(date +%s) -lt $END_TIME_UNIX ]; do
        ((COUNT++))
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] === kubectl exec –∏—Ç–µ—Ä–∞—Ü–∏—è #$COUNT ===" >> "$LOGFILE"

        # --- –ö–æ–º–∞–Ω–¥–∞ 1: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ---
        cmd="cat /etc/os-release"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] > [READ] $cmd" >> "$LOGFILE"
        timeout 10 kubectl exec "$TARGET_POD" -n "$NAMESPACE" -c "$COMPONENT" -- sh -c "$cmd" >> "$LOGFILE" 2>&1
        exit_code=$?
        echo "[K8S_RESULT] type=read exit_code=$exit_code" >> "$LOGFILE"

        # --- –ö–æ–º–∞–Ω–¥–∞ 2: DNS-–∑–∞–ø—Ä–æ—Å (–Ω–ï—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) ---
        cmd="nc -zv 8.8.8.8 53"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] > [UNAUTH] $cmd" >> "$LOGFILE"
        timeout 10 kubectl exec "$TARGET_POD" -n "$NAMESPACE" -c "$COMPONENT" -- sh -c "$cmd" >> "$LOGFILE" 2>&1
        exit_code=$?
        echo "[K8S_RESULT] type=unauth-dns exit_code=$exit_code" >> "$LOGFILE"

        # --- –ö–æ–º–∞–Ω–¥–∞ 3: –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ---
        cmd="echo 'test' >> /tmp/report.txt"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] > [WRITE] $cmd" >> "$LOGFILE"
        timeout 10 kubectl exec "$TARGET_POD" -n "$NAMESPACE" -c "$COMPONENT" -- sh -c "$cmd" >> "$LOGFILE" 2>&1
        exit_code=$?
        echo "[K8S_RESULT] type=write exit_code=$exit_code" >> "$LOGFILE"

        sleep "$K8S_INTERVAL"
    done
}

# === –û—á–∏—Å—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ===
cleanup() {
    if (( CLEANUP_RUNNING == 1 )); then
        return 0
    fi
    CLEANUP_RUNNING=1

    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    kill $curl_pid $stress_pid $k8s_pid 2>/dev/null

    wait $curl_pid 2>/dev/null
    wait $stress_pid 2>/dev/null
    wait $k8s_pid 2>/dev/null

    END_TIME=$(date '+%Y-%m-%d %H:%M:%S')
    RUNTIME=$(( $(date +%s) - START_TIME ))

    echo "[END] $END_TIME" >> "$LOGFILE"
    echo "[RUNTIME] $RUNTIME —Å–µ–∫—É–Ω–¥" >> "$LOGFILE"
    echo "[START] $START_DATETIME" >> "$LOGFILE"
    echo "[END] $END_TIME" >> "$LOGFILE"
    echo "[RUNTIME] $RUNTIME —Å–µ–∫—É–Ω–¥" >> "$LOGFILE"

    # === –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ª–æ–≥–æ–≤ ===
    total_1=$(grep -c "\[RESULT\] host=1" "$LOGFILE" 2>/dev/null || echo 0)
    success_1=$(grep -E "\[RESULT\] host=1 code=2" "$LOGFILE" | wc -l 2>/dev/null || echo 0)
    total_1=${total_1:-0}
    success_1=${success_1:-0}
    fail_1=$((total_1 - success_1))

    total_2=$(grep -c "\[RESULT\] host=2" "$LOGFILE" 2>/dev/null || echo 0)
    success_2=$(grep -E "\[RESULT\] host=2 code=2" "$LOGFILE" | wc -l 2>/dev/null || echo 0)
    total_2=${total_2:-0}
    success_2=${success_2:-0}
    fail_2=$((total_2 - success_2))

    # === –ü–æ–¥—Å—á—ë—Ç CPS (–µ—Å–ª–∏ TARGET_POD –±—ã–ª –∑–∞–¥–∞–Ω) ===
    k8s_iterations=$(grep -c "=== kubectl exec –∏—Ç–µ—Ä–∞—Ü–∏—è #" "$LOGFILE" 2>/dev/null || echo 0)
    k8s_total_commands=$((k8s_iterations * 3))

    read_success=$(grep -c "\[K8S_RESULT\] type=read exit_code=0" "$LOGFILE" 2>/dev/null || echo 0)
    read_fail=$(grep -c "\[K8S_RESULT\] type=read exit_code=[1-9]" "$LOGFILE" 2>/dev/null || echo 0)

    write_success=$(grep -c "\[K8S_RESULT\] type=write exit_code=0" "$LOGFILE" 2>/dev/null || echo 0)
    write_fail=$(grep -c "\[K8S_RESULT\] type=write exit_code=[1-9]" "$LOGFILE" 2>/dev/null || echo 0)

    unauth_ping_success=$(grep -c "\[K8S_RESULT\] type=unauth-dns exit_code=0" "$LOGFILE" 2>/dev/null || echo 0)
    unauth_ping_fail=$(grep -c "\[K8S_RESULT\] type=unauth-dns exit_code=[1-9]" "$LOGFILE" 2>/dev/null || echo 0)

    # === –†–∞—Å—á—ë—Ç RPS –∏ CPS —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
    safe_runtime=${RUNTIME:-1}  # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ 0

    avg_rps_1=$(echo "scale=2; ${total_1:-0} / $safe_runtime" | bc 2>/dev/null || echo 0)
    avg_rps_2=$(echo "scale=2; ${total_2:-0} / $safe_runtime" | bc 2>/dev/null || echo 0)
    avg_cps=$(echo "scale=2; ${k8s_total_commands:-0} / $safe_runtime" | bc 2>/dev/null || echo 0)

    avg_rps_1=${avg_rps_1:-0}
    avg_rps_2=${avg_rps_2:-0}
    avg_cps=${avg_cps:-0}

    # === –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥ ===
    echo "" >> "$LOGFILE"
    echo "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===" >> "$LOGFILE"
    echo "–í—Å–µ–≥–æ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤:" >> "$LOGFILE"
    echo "  $URL_1 ‚Äî $total_1 (avg: $avg_rps_1 req/sec)" >> "$LOGFILE"
    echo "  $URL_2 ‚Äî $total_2 (avg: $avg_rps_2 req/sec)" >> "$LOGFILE"
    echo "" >> "$LOGFILE"
    echo "–£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (2xx):" >> "$LOGFILE"
    echo "  $URL_1 ‚Äî $success_1" >> "$LOGFILE"
    echo "  $URL_2 ‚Äî $success_2" >> "$LOGFILE"
    echo "" >> "$LOGFILE"
    echo "–ù–µ—É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–µ 2xx):" >> "$LOGFILE"
    echo "  $URL_1 ‚Äî $fail_1" >> "$LOGFILE"
    echo "  $URL_2 ‚Äî $fail_2" >> "$LOGFILE"
    echo "" >> "$LOGFILE"
    echo "–ö–æ–º–∞–Ω–¥—ã –≤ –ø–æ–¥–µ:" >> "$LOGFILE"
    echo "  –ò—Ç–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: $k8s_iterations" >> "$LOGFILE"
    echo "  –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: $k8s_total_commands (avg: $avg_cps cmd/sec)" >> "$LOGFILE"
    echo "  –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (sanctioned): $read_success OK, $read_fail FAIL" >> "$LOGFILE"
    echo "  –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (sanctioned): $write_success OK, $write_fail FAIL" >> "$LOGFILE"
    echo "  DNS-–∑–∞–ø—Ä–æ—Å (unauthorized): $unauth_ping_success OK, $unauth_ping_fail FAIL" >> "$LOGFILE"
    echo "==================" >> "$LOGFILE"
    echo "[STAT] RPS ($URL_1): $avg_rps_1 req/sec" >> "$LOGFILE"
    echo "[STAT] RPS ($URL_2): $avg_rps_2 req/sec" >> "$LOGFILE"
    echo "[STAT] CPS (kubectl exec): $avg_cps cmd/sec" >> "$LOGFILE"

    log "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
    exit 0
}

trap cleanup EXIT

# === –ó–∞–ø—É—Å–∫ stress-ng ===
STRESS_CMD="stress-ng --cpu 10 --cpu-method matrixprod --vm 4 --vm-bytes 9G --vm-keep --metrics --timeout"
log "–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–∫–∏: $STRESS_CMD $MONITOR_TIME"
$STRESS_CMD "$MONITOR_TIME" &
stress_pid=$!

# === –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ ===
log "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤..."
monitor "$END_TIME_UNIX" &
curl_pid=$!

# === –ó–∞–ø—É—Å–∫ kubectl exec –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω TARGET_POD) ===
if ! $SKIP_K8S && [[ -n "${TARGET_POD}" ]]; then
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö kubectl exec –∫–æ–º–∞–Ω–¥..."
    run_kubectl_commands &
    k8s_pid=$!
else
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ kubectl exec –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ TARGET_POD –Ω–µ –∑–∞–¥–∞–Ω."
    k8s_pid=0
fi

log "[LAUNCH] –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã."

# === –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ===
wait_time=0
while [ $(date +%s) -lt $END_TIME_UNIX ]; do
    sleep 1
    ((wait_time += 1))
done

kill $curl_pid $stress_pid $k8s_pid 2>/dev/null
wait $curl_pid 2>/dev/null
wait $stress_pid 2>/dev/null
wait $k8s_pid 2>/dev/null

# === –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ cleanup() ===
cleanup